


            ************ Basic ************
(http://stackoverflow.com/questions/23935141/how-to-copy-docker-images-from-one-host-to-another-without-via-repository)
1. docker run hello-world (-i -> make container interactive  -t -> calls a terminal from inside the container  -d ->  detach mode)
docker run —name container-name image-name

2. docker ps -a (show all containers)
3. docker ps (show running containers)
4. docker images (show list of local images)
5. docker pull image (pull image from hub.docker.com)
6. docker tag 542f5f4f1(imageID) anandk/docker-whale:latest
7. docker login
8. docker push anandk/docker-whale:latest
9. docker rmi -f image-Id/image-name
10. docker rm container-id
    docker rm -f container1-id container2-id container3-d & so on
11. docker attach container-name/container-id
12. docker stop container-id
13. docker inspect image-id (return low level information on docker object)
14. docker inspect —format=‘’ containerid
14. docker run -v /Users/anand/Desktop/<path>:/<container path>
15. docker-machine ip
16. docker port container-name/id


************************************************************************************************************************








            ************ DockerFile ************

(https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/)

1. docker build . (build command that uses the current directory as context)
2. docker build  /path/to/a/docker-folder (build command that uses given directory as context)
3. docker build -f /path/to/a/docker-file (build command that uses given docker file to build image)
4. docker build -t anandk/myapp . (specify a repository and tag)
5. docker build -t anandk/myapp:1.0.2 -t anandk/myapp:latest .

6. FROM
FROM <image> / FROM <image>:<tag> / FROM <image>@<digest>

7. RUN :- has 2 forms [ RUN actually runs a command and commit the result OR is an image build step]
RUN<command> [shell form -> the command is run in a shell, by-default is /bin/sh -c on linux or cmd /S/C on windows]
RUN [“executable”, “param1”, “param2”] [exec form]
. RUN [“/bin/bash”, “-c”, “echo hello”]

8. CMD :- has 3 forms [is the command the container runs by default when you launch the built image]
CMD [“executable”, “param1”, “param2”] [exec form, this is the preferred form]
CMD [“param1”, “param2”] [as default parameters to ENTRYPOINT]
CMD command param1 param2 [shell form]

9. LABEL :- LABEL instruction ads metadata to an image, A LABEL is a key-value pair
. LABEL “com.example.vender”=“apple”
LABEL version:=“1.0”
LABEL description=“Description goes here”
. LABEL “com.example.vender”=“apple” version=“1.0” description=“description goes here”
. LABEL “com.example.vender”=“apple” \
version=“1.0” \
description=“description goes here”
maintainer “anand@gmail.com”

10. EXPOSE :- [informs that the container listens on the specifies network port at runtime]
. EXPOSE 8080

11. ENV :- [value will be in the environment and can be used in Dockerfile] [2 forms]
. ENV myName=“john Deo” myDogName=Rex\ the\ dog \
myCatName=fluffy
. ENV myName john Deo
ENV myDogName Rex the dog
ENV myCatName fluffy

12. ADD :- [copies new files, directories or remote file URLs from <src> and adds them to the filesystem of the image at the path <dest>]
. ADD source/path destination/path

13. COPY :- [copies new files or directories from <src> and adds them to the filesystem of the container at the path <dest>]
. COPY source/path destination/path

14. ENTRYPOINT :- [ allows you to configure a container that will run as an executable] [has 2 forms]
. ENTRYPOINT [“executable”, “param1”, “param2”] [exec form, preferred]
. ENTRYPOINT command param1 param2
Default entry point is /bin/sh -c
docker run -i -t —rm -p 80:80 nginx (here is default entry point)

15. VOLUME ??
16. USER ??
17. WORKDIR ??
18. ONBUILD ?? -> instructions the parent Dockerfile gives to the child Dockerfile


************************************************************************************************************************











            ************ Docker Container Networking************

1. docker network ls
3. docker network rm networkid/name
2. docker network inspect network-name
4. docker network create —-driver bridge isolated_nw
   docker network create -d bridge —subnet 144.55.2.8/88 isolated_nw
   docker network create -o “com.docker.network.bridge.host_binding_ipv4”=“148.58.5.7” isolated_nw

5. docker run -itd --network anand_nw ubuntu:16.04 (run image with network)
   docker run —network=isolated_nw —ip=154.25.2.6 -itd anandk/ubuntu:16.04
   (https://docs.docker.com/engine/reference/commandline/network_connect/)

6. docker network disconnect isolated_nw container-name/id


. docker _gwbridge network -> .when you initialise of join a swarm, when one of container’s network can provide external connectivity docker connect to the docker _gqbridge network.
. Then ‘docker _gqbridge’ network is always present when you use overlay networks. 
. ifconfig -> investigate container configuration
. cat /etc/hosts -> to check container’s network configuration

************************************************************************************************************************






















            ************ compose-file.yml/yaml ************ (https://docs.docker.com/compose/compose-file/)

0. docker-compose up
0. docekr-compose ps
0. docker-compose -f /path/to/docker-composefile/ up
0. docker-compose up -d



1. build
    . build ./path/to/directory-context
    . build:
        context: ./path/to/directory
        dockerfile: Dockerfile-alternet
        arge:
            buildno: 1
            password: secret
        image: hello-world:latest (after build this will be the name of image)

2. command (overrfide default command)
    . command: bundle exec thin -p 3000
3. container_name
    . container_name: my-web-container
4. update_config
    . update_config:
        delay: 10s
    . parallelism (number of containers to update at a time)
    . delay (time to wait between updating a group of containers)
    . failur_action (what to do if an update fails. continue/pause[default])
    . monitor (duration after each task update to monitor for failure (ns|us|ms|s|m|h) [default 0s]
    . max_failure_ratio (failure rate to rolerate during an update)
5. restart_policy  [this only takes effect when deploying to a swarm]
    . restart_policy:
        condition: on-failure | none | any[default]
        delay: 5s
        max_attempts: 3
        window: 120s [default: decide immediately]
6. depends_on
    web:
        depends_on:
            - db
            - redis
    redis:
        image: redis
    db:
        image: mysql
7. entrypoint (override the default entrypoint)
    entrypoint: /code/entrypoint.sh
8.env_file (key value format : VAR=VAL)
    . env_file: .env
    . env_file:
    - ./path/to/env_file
    - ./path2/to/env_file
9. expose (can only be accessible to linked services)
    . expose:
        - "3000"
        - "8000"
10. healthcheck:
    . healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost"]
        interval: 1m30s
        timeout: 10s
        retries: 3
    . healthcheck:
        disable: true
11. image: (specify the image to start the container from)
    . image: ubuntu:16.04
12. links
    . links:
        - db
        - redis
13. logging
    . logging:
        driver: syslog | json-file | none
        options:
            syslog-address: "tcp://192.168.12.25:124"
14. pid (this turns sharing between containers)
    .pid:"host"
15. volumes (mount paths)
    . volumes:
        - .hostmachine/path:container/path
16. tty: true
17. ports
    . ports:
        - "8000:8000"






************************************************************************************************************************





















            ************ Swarm mode -> cluster management ************




************************************************************************************************************************























Note: We can detach from the container and leave it running with CTRL-p CTRL-q


1. docker create volume && docker volume containers
2. docker compose
3. docker machine
4. dockignore file
5. docker-training moduels
6. BACKUPS
7. Healthcheck
8. docker swarm



